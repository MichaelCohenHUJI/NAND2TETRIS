// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    Not(in=instruction[15], out=ainstruction);
    Not(in=ainstruction, out=cinstruction);

    And(a=instruction[5], b=cinstruction, out=storeInA);
    Mux16(a=instruction, b=outMM, sel=storeInA, out=Areg);

    Or(a=ainstruction, b=storeInA, out=loadRegA);
    ARegister(in=Areg, load=loadRegA, out=AregIns);

    And(a=cinstruction, b=instruction[4], out=loadRegD);
    DRegister(in=outMM, load=loadRegD, out=Dreg);

    Mux16(a=AregIns, b=inM, sel=instruction[12], out=AMreg);

    ALU( x=Dreg, y=AMreg, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], zr=jeq, ng=jlt,  out=outMM);
    //Mux16(a=Areg, b=Dreg, sel=instruction[11] ,out=  )

    And(a=cinstruction, b=instruction[3], out=writeM);
    And16(a=AregIns, b=AregIns, out[0..14]=addressM, out[15]=outout);

    // jumping ...
    Not(in=jlt, out=posOrZero);
    Not(in=jeq, out=notEqZero);
    And(a=posOrZero, b=notEqZero, out=jgt);
    And(a=instruction[2], b=jlt, out=jltout);
    And(a=instruction[1], b=jeq, out=jeqout);
    And(a=instruction[0], b=jgt, out=jgtout);
    Or(a=jltout , b=jeqout, out=jleq);
    Or(a=jleq, b=jgtout, out=jump );

    And(a=jump, b=cinstruction, out=jumptrue);
    Not( in=jumptrue, out=inc );
    PC(in=AregIns , load=jumptrue , inc=inc , reset=reset , out[0..14]=pc);
    // Put your code here:

    And16(a=outMM, b=outMM, out=outM);
}
