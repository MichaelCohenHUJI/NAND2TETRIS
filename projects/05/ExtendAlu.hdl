/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift
* of x, moreover if instruction[5] equals 0 it will return shift right
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;

     PARTS:

     Mul(a=x, b=y, out=mul);
     Mux16(a=y, b=x, sel=instruction[4], out=op);
     ShiftLeft(in=op, out=left);
     ShiftRight(in=op, out=right);
     Mux16(a=right, b=left, sel=instruction[5], out=shift);

     ALU( x=x, y=y, zx=instruction[5], nx=instruction[4],
          zy=instruction[3], ny=instruction[2], f=instruction[1],
          no=instruction[0], zr=zra, ng=nga,  out=outMM);

     Mux16(a=shift, b=outMM, sel=instruction[8], out=outMMM);
     Mux16(a=mul, b=outMMM, sel=instruction[7], out=outbus);
     And16(a=outbus, b=outbus, out[0..7]=tempout1, out[8..14]=tempout2, out[15]=ng);
     Or8Way(in=tempout1, out=zr1);
     Or8Way(in[0..6]=tempout2, in[7]=false, out=zr2);
     Or(a=zr1, b=zr2, out=notzr);
     Not(in=notzr, out=zr);
     And16(a=outbus, b=outbus, out=out);
}
